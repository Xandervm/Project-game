import pygame as pg
import random
from alpsettings import *
from alpsprites import *
from os import path
import os
from pygame.locals import *
from alpimg import *

class alpGame:
    def __init__(self):
        # initialize game window, etc
        pg.init()
        pg.mixer.init()
        self.screen = pg.display.set_mode((WIDTH, HEIGHT))
        pg.display.set_caption(TITLE)
        self.clock = pg.time.Clock()
        self.running = True
        self.font_name = pg.font.match_font(FONT_NAME)
        self.load_data()

    def load_data(self):
        # load high score
        self.dir = path.dirname(__file__)
        img_dir = path.join(self.dir, "alpimg")
        with open(path.join(self.dir, HS_FILE), 'r') as f:
            try:
                self.highscore = int(f.read())
            except:
                self.highscore = 0
        self.alp_spritesheet = alpSpritesheet(path.join(img_dir, SPRITESHEET))
        self.alp_spritesheet2 = alpSpritesheet2(path.join(img_dir, SPRITESHEET2))
        self.alp_spritesheet3 = alpSpritesheet3(path.join(img_dir, SPRITESHEET3))
        self.alp_spritesheet4 = alpSpritesheet4(path.join(img_dir, SPRITESHEET4))
        # load sound
        self.alp_snd_dir = path.join(self.dir, "alpsnd")
        self.alp_jump_sound = pg.mixer.Sound(path.join(self.alp_snd_dir, "alpjump1.wav"))
        self.alp_gameover_sound = pg.mixer.Sound(path.join(self.alp_snd_dir, "alpgameover.wav"))
        self.alp_powerups_sound = pg.mixer.Sound(path.join(self.alp_snd_dir, "alpboost.wav"))

    def new(self):
        # start a new game
        self.score = 0
        self.alp_all_sprites = pg.sprite.Group()
        self.alp_platforms = pg.sprite.Group()
        self.alp_powerups = pg.sprite.Group()
        self.alp_player = alpPlayer(self)
        for plat in PLATFORM_LIST:
            alpPlatform(self, *plat)
        self.run()

    def run(self):
        # Game Loop
        self.playing = True
        while self.playing:
            self.clock.tick(FPS)
            self.events()
            self.update()
            self.draw()

    def update(self):
        # Game Loop - Update
        self.alp_all_sprites.update()
        # check if player hits a platform - only if falling
        if self.alp_player.vel.y > 0:
            hits = pg.sprite.spritecollide(self.alp_player, self.alp_platforms, False)
            if hits:
                lowest = hits[0]
                for hit in hits:
                    if hit.rect.bottom > lowest.rect.bottom:
                        lowest = hit
                if self.alp_player.pos.x < lowest.rect.right + 10 and self.alp_player.pos.x > lowest.rect.left + 10:
                    if self.alp_player.pos.y < lowest.rect.bottom:
                        self.alp_player.pos.y = lowest.rect.top
                        self.alp_player.vel.y = 0
                        self.alp_player.jumping = False

        # if player reaches top 1/4 of screen
        if self.alp_player.rect.top <= HEIGHT / 4:
            self.alp_player.pos.y += abs(self.alp_player.vel.y)
            for plat in self.alp_platforms:
                plat.rect.y += abs(self.alp_player.vel.y)
                if plat.rect.top >= HEIGHT:
                    plat.kill()
                    self.score += 10

        # Powerup
        pow_hits = pg.sprite.spritecollide(self.alp_player, self.alp_powerups, True)
        for power in pow_hits:
                self.alp_player.vel.y = -BOOST_POWER
                self.alp_player.jumping = False
                self.alp_powerups_sound.play()

        # Die!
        if self.alp_player.rect.bottom > HEIGHT:
            for sprite in self.alp_all_sprites:
                sprite.rect.y -= max(self.alp_player.vel.y, 10)
                if sprite.rect.bottom < 0:
                    sprite.kill()
        if len(self.alp_platforms) == 0:
            self.playing = False
            self.alp_gameover_sound.play()

        # spawn new platforms to keep same average number
        while self.score < 1250 and len(self.alp_platforms) < 7:
            width = random.randrange(50, 100)
            alpPlatform(self, random.randrange(0, WIDTH - width),
                        random.randrange(-75, -30))

        while self.score > 1250 and self.score < 3000 and len(self.alp_platforms) < 6:
            width = random.randrange(50,100)
            alpPlatform(self, random.randrange (0, WIDTH - width),
                        random.randrange(-75, -30))

        while self.score > 3000 and len(self.alp_platforms) < 5:
            width = random.randrange(50,100)
            alpPlatform(self, random.randrange (0, WIDTH - width),
                        random.randrange(-75, -30))

    def events(self):
        # Game Loop - events
        for event in pg.event.get():
            # check for closing window
            if event.type == pg.QUIT:
                if self.playing:
                    self.playing = False
                self.running = False
            if event.type == pg.KEYDOWN:
                if event.key == pg.K_SPACE:
                    self.alp_player.jump()
            if event.type == pg.KEYUP:
                if event.key == pg.K_SPACE:
                    self.alp_player.jump_cut()

    def draw(self):
        # Game Loop - draw
        self.screen.fill(BGCOLOR)
        self.alp_all_sprites.draw(self.screen)
        self.screen.blit(self.alp_player.image, self.alp_player.rect)
        self.draw_text(str(self.score), 22, WHITE, WIDTH / 2, 15)
        # *after* drawing everything, flip the display
        pg.display.flip()

    def show_start_screen(self):
        # game splash/start screen
        self.screen.fill(BGCOLOR)
        self.draw_text(TITLE, 48, WHITE, WIDTH / 2, HEIGHT / 4)
        self.draw_text("Arrows to move, Space to jump", 22, WHITE, WIDTH / 2, HEIGHT / 2)
        self.draw_text("Press a key to play", 22, WHITE, WIDTH / 2, HEIGHT * 3 / 4)
        self.draw_text("High Score: " + str(self.highscore), 22, WHITE, WIDTH / 2, 15)
        pg.display.flip()
        self.wait_for_key()

    def show_go_screen(self):
        # game over/continue
        if not self.running:
            return
        self.screen.fill(BGCOLOR)
        self.draw_text("GAME OVER", 48, WHITE, WIDTH / 2, HEIGHT / 4)
        self.draw_text("Score: " + str(self.score), 22, WHITE, WIDTH / 2, HEIGHT / 2)
        self.draw_text("Press a key to play again", 22, WHITE, WIDTH / 2, HEIGHT * 3 / 4)
        if self.score > self.highscore:
            self.highscore = self.score
            self.draw_text("NEW HIGH SCORE!", 22, WHITE, WIDTH / 2, HEIGHT / 2 + 40)
            with open(path.join(self.dir, HS_FILE), 'w') as f:
                f.write(str(self.score))
        else:
            self.draw_text("High Score: " + str(self.highscore), 22, WHITE, WIDTH / 2, HEIGHT / 2 + 40)
        pg.display.flip()
        self.wait_for_key()

    def wait_for_key(self):
        waiting = True
        while waiting:
            self.clock.tick(FPS)
            for event in pg.event.get():
                if event.type == pg.QUIT:
                    waiting = False
                    self.running = False
                if event.type == pg.KEYUP:
                    waiting = False

    def draw_text(self, text, size, color, x, y):
        font = pg.font.Font(self.font_name, size)
        text_surface = font.render(text, True, color)
        text_rect = text_surface.get_rect()
        text_rect.midtop = (x, y)
        self.screen.blit(text_surface, text_rect)

g = alpGame()
g.show_start_screen()
while g.running:
    g.new()
    g.show_go_screen()

pg.quit()
